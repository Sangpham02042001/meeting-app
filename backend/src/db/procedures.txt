DELIMITER $$
DROP PROCEDURE IF EXISTS getTeamMembers;
CREATE PROCEDURE getTeamMembers(IN teamId INT)
BEGIN
	SELECT CONCAT(u.firstName, ' ', u.lastName) as userName,
		u.id
	FROM users_teams ut
	INNER JOIN users u ON u.id = ut.userId
	WHERE ut.teamId = teamId; 
END $$
DELIMITER ;

DELIMITER $$
DROP PROCEDURE IF EXISTS getTeamRequestMembers;
CREATE PROCEDURE getTeamRequestMembers(IN teamId INT)
BEGIN 
SELECT CONCAT(u.firstName, ' ', u.lastName) as userName,
		u.id
FROM request_users_teams rut
INNER JOIN users u ON u.id = rut.requestUserId
WHERE rut.teamId = teamId;
END $$
DELIMITER ;

DELIMITER $$
DROP PROCEDURE IF EXISTS getTeamInvitedUsers;
CREATE PROCEDURE getTeamInvitedUsers(
	IN teamId INT
)
BEGIN
	SELECT CONCAT(u.firstName, ' ', u.lastName) as userName,
		u.id
	FROM invited_users_teams iut
	INNER JOIN users u ON u.id = iut.invitedUserId
	WHERE iut.teamId = teamId;
END $$
DELIMITER ;

DELIMITER $$
DROP PROCEDURE IF EXISTS updateBasicUserInfo;
CREATE PROCEDURE updateBasicUserInfo(
	IN userId INT,
    IN firstName VARCHAR(255),
    IN lastName VARCHAR(255),
    IN avatar VARCHAR(255)
)
BEGIN
	IF firstName != '' THEN
		UPDATE users
        SET firstName = firstName
        WHERE id = userId;
    END IF;
    
    IF lastName != '' THEN
		UPDATE users
        SET lastName = lastName
        WHERE id = userId;
    END IF;
    
    IF avatar != '' THEN
		UPDATE users
		SET avatar = avatar
		WHERE id = userId;
    END IF;
    
    SELECT u.id, u.lastName, u.firstName FROM users u
    WHERE id = userId;
END $$
DELIMITER ;


DELIMITER $$
DROP PROCEDURE IF EXISTS removeInvitations;
CREATE PROCEDURE removeInvitations(
	teams VARCHAR(255),
    userId INT,
	confirmFlag BOOLEAN
)
BEGIN
	DELETE FROM invited_users_teams iut
    WHERE iut.invitedUserId = userId AND FIND_IN_SET(iut.teamId, teams);
    IF confirmFlag THEN
		SET @array = teams;
        WHILE (LOCATE(',', @array) > 0)
        DO
			SET @id = CONVERT(ELT(1, @array), SIGNED INT);
            SET @array = SUBSTRING(@array, LOCATE(',',@array) + 1);
            IF @id != '' THEN
				INSERT INTO users_teams VALUES(NOW(), NOW(), userId, @id);
            END IF;
        END WHILE;
    END IF;
    SELECT 'Successfully' message;
END $$
DELIMITER ;

DROP PROCEDURE IF EXISTS searchUsers;
DELIMITER $$
CREATE PROCEDURE searchUsers(
	IN userId INT,
    IN text VARCHAR(255)
)
BEGIN 
	DECLARE my_text VARCHAR(255) DEFAULT CONCAT('%', text, '%');
	SELECT CONCAT(u.firstName, ' ', u.lastName) as userName,
			u.id, u.email
    FROM users u
    WHERE u.id != userId AND CONCAT(u.firstName, ' ', u.lastName) LIKE my_text;
END $$
DELIMITER ;

DELIMITER $$
DROP PROCEDURE IF EXISTS updateBasicTeamInfo;
CREATE PROCEDURE updateBasicTeamInfo(
	IN teamId INT,
    IN teamName VARCHAR(255),
    IN coverPhoto VARCHAR(255),
    IN teamType VARCHAR(255)
)
BEGIN
	IF teamName != '' THEN
		UPDATE teams 
        SET name = teamName
        WHERE id = teamId;
	END IF;
        
	IF teamType != '' THEN
		UPDATE teams
        SET teamType = teamType
        WHERE id = teamId;
	END IF;
    
    IF coverPhoto != '' THEN
		UPDATE teams
        SET coverPhoto = coverPhoto
        WHERE id = teamId;
	END IF;
    
	SELECT t.name, t.teamType, t.coverPhoto FROM teams t
	WHERE t.id = teamId;
END$$
DELIMITER ;