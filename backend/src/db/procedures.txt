DELIMITER $$
DROP PROCEDURE IF EXISTS getTeamMembers;
CREATE PROCEDURE getTeamMembers(IN teamId INT)
BEGIN
	SELECT CONCAT(u.firstName, ' ', u.lastName) as userName,
		u.id
	FROM users_teams ut
	INNER JOIN users u ON u.id = ut.userId
	WHERE ut.teamId = teamId; 
END $$
DELIMITER ;

DELIMITER $$
DROP PROCEDURE IF EXISTS getTeamRequestMembers;
CREATE PROCEDURE getTeamRequestMembers(IN teamId INT)
BEGIN 
SELECT CONCAT(u.firstName, ' ', u.lastName) as userName,
		u.id
FROM request_users_teams rut
INNER JOIN users u ON u.id = rut.requestUserId
WHERE rut.teamId = teamId;
END $$
DELIMITER ;

DELIMITER $$
DROP PROCEDURE IF EXISTS updateBasicUserInfo;
CREATE PROCEDURE updateBasicUserInfo(
	IN userId INT,
    IN firstName VARCHAR(255),
    IN lastName VARCHAR(255),
    IN avatar BLOB
)
BEGIN
	IF firstName != '' THEN
		UPDATE users
        SET firstName = firstName
        WHERE id = userId;
    END IF;
    
    IF lastName != '' THEN
		UPDATE users
        SET lastName = lastName
        WHERE id = userId;
    END IF;
    
    IF avatar IS NOT NULL THEN
		UPDATE users
		SET avatar = avatar
		WHERE id = userId;
    END IF;
    
    SELECT u.id, u.lastName, u.firstName FROM users u
    WHERE id = userId;
END $$
DELIMITER ;

DELIMITER $$
DROP PROCEDURE IF EXISTS removeRequestUsers;
CREATE PROCEDURE removeRequestUsers(
	users VARCHAR(255),
    teamId INT,
	confirmFlag BOOLEAN
)
BEGIN
	DECLARE teamName VARCHAR(255);
    DECLARE hostName VARCHAR(255);
    DECLARE tmp VARCHAR(10);
	DELETE FROM request_users_teams rut
    WHERE rut.teamId = teamId AND FIND_IN_SET(rut.requestUserId, users);
    IF confirmFlag THEN
		SET @array = users;
        
        SELECT CONCAT(u.firstName, " ", u.lastName),
			   t.name INTO hostName, teamName
        FROM teams t
        INNER JOIN users u ON u.id = t.hostId
        WHERE t.id = teamId;
        SET @content = CONCAT(hostName, " has confirmed your request to join ",teamName);
        SET @relativeLink = CONCAT("/teams/",teamId);
        WHILE (LOCATE(',', @array) > 0)
        DO
			SET @id = CONVERT(ELT(1, @array), SIGNED INT);
            SET @array = SUBSTRING(@array, LOCATE(',',@array) + 1);
            IF @id != '' THEN
				INSERT INTO users_teams VALUES(NOW(), NOW(), @id, teamId);
				SET tmp = createNotification(@content, @relativeLink, @id);
            END IF;
        END WHILE;
    END IF;
    SELECT 'Successfully' message;
END$$
DELIMITER ;

DELIMITER $$
DROP PROCEDURE IF EXISTS removeInvitations;
CREATE PROCEDURE removeInvitations(
	teams VARCHAR(255),
    userId INT,
	confirmFlag BOOLEAN
)
BEGIN
	DELETE FROM invited_users_teams iut
    WHERE iut.invitedUserId = userId AND FIND_IN_SET(iut.teamId, teams);
    IF confirmFlag THEN
		SET @array = teams;
        WHILE (LOCATE(',', @array) > 0)
        DO
			SET @id = CONVERT(ELT(1, @array), SIGNED INT);
            SET @array = SUBSTRING(@array, LOCATE(',',@array) + 1);
            IF @id != '' THEN
				INSERT INTO users_teams VALUES(NOW(), NOW(), userId, @id);
            END IF;
        END WHILE;
    END IF;
    SELECT 'Successfully' message;
END $$
DELIMITER ;