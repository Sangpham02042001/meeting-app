DELIMITER $$
DROP TRIGGER IF EXISTS after_team_insert;
CREATE TRIGGER after_team_insert
	AFTER INSERT ON teams
    FOR EACH ROW
BEGIN 
	INSERT INTO users_teams
    SET userId = NEW.hostId,
		teamId = NEW.id,
        createdAt = NOW(),
        updatedAt = NOW();
END $$
DELIMITER ;

DELIMITER $$
DROP TRIGGER IF EXISTS before_meeting_delete;
CREATE TRIGGER before_meeting_delete
BEFORE DELETE ON meetings FOR EACH ROW
BEGIN 
	DELETE FROM users_meetings um
    WHERE um.meetingId = OLD.id;
END $$
DELIMITER ;

DELIMITER $$
DROP TRIGGER IF EXISTS before_team_delete;
CREATE TRIGGER before_team_delete
BEFORE DELETE ON teams FOR EACH ROW
BEGIN 
	DELETE FROM meetings m
    WHERE m.teamId = OLD.id;

    DELETE FROM users_teams ut
    WHERE ut.teamId = OLD.id;

    DELETE FROM request_users_teams rut
    WHERE rut.teamId = OLD.id;

    DELETE FROM notifications n
    WHERE n.teamId = OLD.id; 
END $$
DELIMITER ;

DELIMITER $$
DROP TRIGGER IF EXISTS before_delete_invitation;
CREATE TRIGGER before_delete_invitation
BEFORE DELETE ON invited_users_teams FOR EACH ROW
BEGIN 
	DELETE FROM notifications 
    WHERE teamId = OLD.teamId AND userId = OLD.invitedUserId;
END $$
DELIMITER ;

DELIMITER $$
DROP TRIGGER IF EXISTS after_request_team;
CREATE TRIGGER after_request_team
AFTER INSERT ON request_users_teams FOR EACH ROW 
BEGIN 
	DECLARE userName VARCHAR(255);
    DECLARE teamName VARCHAR(255);
    DECLARE tmp VARCHAR(10);
    DECLARE hostId INT;
    SELECT t.name, t.hostId INTO teamName, hostId
    FROM teams t
    WHERE t.id = NEW.teamId;
    SELECT CONCAT(u.firstName, ' ', u.lastName) INTO userName
    FROM users u
    WHERE u.id = NEW.requestUserId;
    SET @content = CONCAT(userName, ' requests to join ', teamName);
    SET @relativeLink = CONCAT('/teams/', NEW.teamId, '/setting/requestusers');
    SET tmp = createTeamNotification(@content, @relativeLink, hostId, NEW.teamId, NEW.requestUserId);
END $$ 
DELIMITER ;

DROP TRIGGER IF EXISTS after_create_message;
DELIMITER $$
CREATE TRIGGER after_create_message
AFTER INSERT ON messages FOR EACH ROW
BEGIN 
	DECLARE done INT DEFAULT FALSE;
	DECLARE userName VARCHAR(255);
    DECLARE teamName VARCHAR(255);
    DECLARE _userId INT;
    DECLARE tmp VARCHAR(5);
    DECLARE tmp_userId INT;
    DECLARE my_cursor CURSOR FOR SELECT userId FROM users_teams ut WHERE ut.teamId = NEW.teamId AND ut.userId != NEW.userId;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    IF NEW.conversationId IS NOT NULL THEN
		SELECT CONCAT(u.firstName, ' ', u.lastName) INTO userName 
        FROM users_conversations uc
        INNER JOIN users u ON uc.userId  = u.id
        WHERE u.id = NEW.userId AND uc.conversationId = NEW.conversationId;
        
        SELECT us.userId INTO _userId
        FROM users_conversations us
        WHERE us.conversationId = NEW.conversationId AND us.userId != NEW.userId;
        
        SET @content = CONCAT(userName, ' sent message to you');
        SET @relativeLink = CONCAT('/conversations/', NEW.userId);
        SET tmp = createMessageNotification(@content, @relativeLink, _userId, NEW.userId, null, NEW.conversationId);
    END IF;
    
    IF NEW.teamId IS NOT NULL THEN
		SELECT CONCAT(u.firstName, ' ', u.lastName) INTO userName
        FROM users u
        WHERE u.id = NEW.userId;
        
        SELECT t.name INTO teamName
        FROM teams t
        WHERE t.id = NEW.teamId;
       
		SET @content = CONCAT(userName, ' sent message to ', teamName);
        SET @relativeLink = CONCAT('/teams/', NEW.teamId);
        
        OPEN my_cursor;
		
        read_loop: LOOP 
			FETCH my_cursor INTO tmp_userId;
            IF done THEN
				LEAVE read_loop;
			END IF;
            SET tmp = createMessageNotification(@content, @relativeLink, tmp_userId, NEW.userId, NEW.teamId, null);
        END LOOP;
            
        CLOSE my_cursor;
    END IF;
END $$
DELIMITER ;