DELIMITER $$
DROP TRIGGER IF EXISTS after_team_insert;
CREATE TRIGGER after_team_insert
	AFTER INSERT ON teams
    FOR EACH ROW
BEGIN 
	INSERT INTO users_teams
    SET userId = NEW.hostId,
		teamId = NEW.id,
        createdAt = NOW(),
        updatedAt = NOW();
END $$
DELIMITER ;

DELIMITER $$
DROP TRIGGER IF EXISTS before_meeting_delete;
CREATE TRIGGER before_meeting_delete
BEFORE DELETE ON meetings FOR EACH ROW
BEGIN 
	DELETE FROM users_meetings um
    WHERE um.meetingId = OLD.id;
END $$
DELIMITER ;

DELIMITER $$
DROP TRIGGER IF EXISTS before_team_delete;
CREATE TRIGGER before_team_delete
BEFORE DELETE ON teams FOR EACH ROW
BEGIN 
	DELETE FROM meetings m
    WHERE m.teamId = OLD.id;

    DELETE FROM users_teams ut
    WHERE ut.teamId = OLD.id;

    DELETE FROM request_users_teams rut
    WHERE rut.teamId = OLD.id;

    DELETE FROM notifications n
    WHERE n.teamId = OLD.id; 
END $$
DELIMITER ;

DELIMITER $$
DROP TRIGGER IF EXISTS before_delete_invitation;
CREATE TRIGGER before_delete_invitation
BEFORE DELETE ON invited_users_teams FOR EACH ROW
BEGIN 
	DELETE FROM notifications 
    WHERE teamId = OLD.teamId AND userId = OLD.invitedUserId;
END $$
DELIMITER ;

DELIMITER $$
DROP TRIGGER IF EXISTS after_request_team;
CREATE TRIGGER after_request_team
AFTER INSERT ON request_users_teams FOR EACH ROW 
BEGIN 
	DECLARE userName VARCHAR(255);
    DECLARE teamName VARCHAR(255);
    DECLARE tmp VARCHAR(10);
    DECLARE hostId INT;
    SELECT t.name, t.hostId INTO teamName, hostId
    FROM teams t
    WHERE t.id = NEW.teamId;
    SELECT CONCAT(u.firstName, ' ', u.lastName) INTO userName
    FROM users u
    WHERE u.id = NEW.requestUserId;
    SET @content = CONCAT(userName, ' requests to join ', teamName);
    SET @relativeLink = CONCAT('/teams/', NEW.teamId, '/setting/requestusers');
    SET tmp = createTeamNotification(@content, @relativeLink, hostId, NEW.teamId, NEW.requestUserId);
END $$ 
DELIMITER ;