DELIMITER $$
CREATE TRIGGER after_team_insert
	AFTER INSERT ON teams
    FOR EACH ROW
BEGIN 
	INSERT INTO users_teams
    SET userId = NEW.hostId,
		teamId = NEW.id,
        createdAt = NOW(),
        updatedAt = NOW();
END $$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER before_meeting_delete
BEFORE DELETE ON meetings FOR EACH ROW
BEGIN 
	DELETE FROM users_meetings um
    WHERE um.meetingId = OLD.id;
END $$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER before_team_delete
BEFORE DELETE ON teams FOR EACH ROW
BEGIN 
	DELETE FROM meetings m
    WHERE m.teamId = OLD.id;

    DELETE FROM users_teams ut
    WHERE ut.teamId = OLD.id;

    DELETE FROM request_users_teams rut
    WHERE rut.teamId = OLD.id;
    
    DELETE FROM invited_users_teams iut
    WHERE iut.teamId = OLD.id;

    DELETE FROM notifications n
    WHERE n.teamId = OLD.id; 
END $$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER before_delete_invitation
BEFORE DELETE ON invited_users_teams FOR EACH ROW
BEGIN 
	DELETE FROM notifications 
    WHERE teamId = OLD.teamId AND userId = OLD.invitedUserId;
END $$
DELIMITER ;

DROP TRIGGER IF EXISTS before_delete_meeting;
DELIMITER $$
CREATE TRIGGER before_delete_meeting
BEFORE DELETE ON meetings
FOR EACH ROW
BEGIN
	DELETE FROM users_meetings ut
    WHERE ut.meetingId = OLD.id;
END $$
DELIMITER ;


DELIMITER $$
CREATE TRIGGER before_team_memmber_remove
BEFORE DELETE ON users_teams FOR EACH ROW
BEGIN
	DELETE FROM meetings m WHERE m.teamId = OLD.teamId AND m.hostId = OLD.userId;
    DELETE FROM messages WHERE userId = OLD.userId and teamId = OLD.teamId;
    DELETE FROM users_meetings um 
    WHERE um.userId = OLD.userId AND um.meetingId IN(
		SELECT id FROM meetings where teamId = OLD.teamId
    );
    DELETE FROM messages m WHERE m.meetingId IN(
		SELECT id from meetings WHERE meetings.teamId = OLD.teamId 
    ) AND m.userId = OLD.userId; 
END $$
DELIMITER ;
